#!/usr/bin/env ruby

def compile_my_markdown(source_path, layout_path)
  compile source_path do
    filter :bacchantes
    filter :erb
    filter :mark_abbreviations
    filter :generate_references
    filter :kramdown, :input => 'GFM'
    layout layout_path
    filter :relativize_paths, type: :html
    write item.identifier.without_ext + '.html'
  end
end

preprocess do
  @items.each do |i|
    c = i.identifier.to_s.match(%r{/([a-z]{2})/})
    i[:language] = if not c.nil? then c[1].intern else :unknown end
    [:kind, :category, :group].each do |a|
      i[a] = if not i[a].nil? then i[a].intern else :unknown end
    end
    b = i[:bibliography]
    unless b.nil?
      b.each_value {|e|
        e[:authors] = e[:authors].map {|n| AuthorName.new(n)}
      }
    end
  end
  @items.map {|i| i[:language]}.uniq.select {|l| l != :unknown}.each do |l|
    @items.create('', {:language => l}, "/#{l}/index.md")
  end
end

compile_my_markdown('/*/index.md', '/abstracts.*')
compile_my_markdown('/**/*.md', '/article.*')

compile '/fonts/*.scss' do
end

compile '/**/*.scss' do
  filter :sass, syntax: :scss
  filter :relativize_paths, type: :css
  write item.identifier.without_ext + '.css'
end

compile '/**/*.{png,svg,jpg,tiff,js,woff}' do
  write item.identifier.to_s
end

compile '/**/*' do
end

layout '/**/*.html', :erb
layout '/**/*.erb', :erb
layout '/**/*.haml', :haml
